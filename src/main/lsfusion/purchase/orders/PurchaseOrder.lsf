MODULE PurchaseOrder;

REQUIRE Time, MetaNumerator, Employee, Company, Currency,
        MetaTax, TaxItem, BarCode, PurchaseOrderType,
        PurchaseSettings, PartnerPurchase, 
        ItemSales, ItemCost,
        PaymentTermsPurchase, Doc, DateUtils,
        DebtPartner, LocationEmployee;  

NAMESPACE Purchase;

CLASS Order 'Заказ поставщику';

@defineDocStatus(order, 'заказа поставщику');

// type
type 'Тип' = DATA OrderType (Order) NONULL;
nameType 'Тип' (Order s) = name(type(s));

WHEN LOCAL SET(Order o IS Order) AND NOT CHANGED(type(o)) DO type(o) <- defaultOrderType(); 

dateTime 'Дата'  = DATA DATETIME (Order);
WHEN LOCAL SET(Order o IS Order) AND NOT CHANGED(dateTime(o)) DO { dateTime(o) <- currentDateTime();}
@defineDateTimeAggregation(Order);

@defineNumberType(order);

numberDate 'Описание' (Order o) = number(o) + ' от ' + dateTime(o) IN id;

vendor 'Поставщик' = DATA Partner (Order) NONULL;
nameVendor 'Поставщик' (Order o) = name(vendor(o));

CONSTRAINT vendor(Order o) AND NOT isVendor(vendor(o))
                CHECKED BY vendor[Order]
                MESSAGE 'Контрагент заказа поставщику должен быть поставщиком';

addressCsvVendor 'Адрес поставщика' (Order o) = addressCsv(vendor(o));

// Invoicing information
paymentTerms = DATA PaymentTerm (Order);
namePaymentTerms 'Условия оплаты' (Order o) = name(paymentTerms(o));

WHEN LOCAL CHANGED(vendor(Order o)) AND NOT CHANGED(paymentTerms(o)) DO paymentTerms(o) <- vendorPaymentTerms(vendor(o)); 

// Shipping information
scheduledDateTime 'Планируемая дата' = DATA DATETIME (Order);
scheduledDateTime(Order o) <- currentDateTime() WHEN SET(o IS Order);   

// company
company 'Компания' = DATA Company (Order) NONULL;
nameCompany 'Компания' (Order o) = name(company(o));
WHEN LOCAL SET(Order o IS Order) AND NOT CHANGED(company(o)) DO company(o) <- defaultCompany();

// location
location = DATA Location (Order);
nameLocation 'Место хранения' (Order o) = name(location(o));

// currency
currency = DATA Currency (Order);
nameCurrency 'Валюта' (Order o) = name(currency(o));

WHEN LOCAL SETCHANGED(type(Order o)) AND currency(type(o)) AND NOT CHANGED(currency(o)) DO currency(o) <- currency(type(o));  

// Purchase information
representative 'Наш представитель' = DATA Employee (Order);
nameRepresentative 'Наш представитель' (Order o) = MasterData.name(representative(o));

representative(Order o) <- currentUser() IF currentUser() IS Employee WHEN SET(o IS Order);

CONSTRAINT representative(Order o) AND NOT legalEntity(representative(o)) = company(o) 
    CHECKED BY representative MESSAGE 'Должен быть наш работник';

vendorReference 'Код поставщика' = DATA STRING[30] (Order);

// Lines
CLASS OrderLine 'Строка заказа';
order =  DATA Order (OrderLine) NONULL  DELETE;

index '№' = PARTITION SUM 1 ORDER OrderLine l BY order(l) IN id MATERIALIZED CHARWIDTH 3;

item = DATA Item (OrderLine) NONULL;
nameItem '{Item}' (OrderLine l) = name(item(l));
idBarCodeItem 'Штрихкод' (OrderLine l) = idBarCode(item(l));
idItem 'Код' (OrderLine l) = id(item(l));

CONSTRAINT item(OrderLine l) AND NOT canBePurchased(item(l))
            CHECKED BY item[OrderLine] 
            MESSAGE 'Номенклатура не предназначена для закупки';

description 'Описание' = DATA ISTRING (OrderLine);

uom (OrderLine l) = uom(item(l));
nameUom 'Ед. изм.' (OrderLine l) = name(uom(l));

quantity '{Quantity}' = DATA NUMERIC[16,3] (OrderLine);

price 'Цена' = DATA NUMERIC[10,2] (OrderLine);

defaultPrice = ABSTRACT CASE NUMERIC[10,2] (OrderLine);
WHEN LOCAL SETCHANGED(item(OrderLine l)) AND NOT CHANGED(price(l)) DO price(l) <- defaultPrice(l);

defaultPrice (OrderLine l) += WHEN cost(item(l), DATE(dateTime(order(l)))) THEN cost(item(l)); 

@defineTaxCalc(order, o, purchase);
taxIncluded (OrderLine l) += taxIncluded(type(order(l)));

WHEN LOCAL CHANGED (item(OrderLine ol)) DO {
    in(ol, Tax t) <- purchaseIn(item(ol),t); 
}

// Line properties
nameStatus 'Статус' (OrderLine l) = nameStatus(order(l)); 
type (OrderLine l) = type(order(l)); 

dateTime 'Создан' (OrderLine l) = dateTime(order(l));
number 'Номер' (OrderLine l) = number(order(l));
numberDate 'Описание' (OrderLine l) = numberDate(order(l));

location 'Место хранения' (OrderLine l) = location(order(l));
nameLocation 'Место хранения' (OrderLine l) = location(order(l));

vendor (OrderLine l) = vendor(order(l));
nameVendor 'Поставщик' (OrderLine l) = nameVendor(order(l));

edit (OrderLine l) + { edit(order(l)); } 

FORM order 'Заказ поставщику'
    OBJECTS o = Order PANEL
    PROPERTIES(o) nameType, dateTime, number, 
                  nameVendor, nameCompany, nameLocation, nameCurrency,
                  namePaymentTerms,
                  scheduledDateTime,
                  nameRepresentative, vendorReference
    PROPERTIES(o) READONLY untaxedAmount, taxAmount, amount
                 
    OBJECTS l = OrderLine
    PROPERTIES(l) index, nameItem, description, nameUom, idBarCodeItem, idItem, quantity, price, untaxedAmount, taxes ON CHANGE changeTax(l)
    PROPERTIES(l) NEW, DELETE
    FILTERS order(l) = o
     
    EDIT Order OBJECT o    
;      

DESIGN order {
    caption = (CONCAT ' ', 'Заказ поставщику', '№' + number(o), 'от ' + dateTime(o));
    OBJECTS {
        NEW header {
            alignment = STRETCH;    
            type = CONTAINERH;
            NEW headerLeft {
                MOVE PROPERTY(nameType(o)) { notNull = TRUE; }
                MOVE PROPERTY(dateTime(o));
                MOVE PROPERTY(number(o));
            }
            NEW headerRight {
                MOVE PROPERTY(nameVendor(o)) { notNull = TRUE; } 
                MOVE PROPERTY(nameCompany(o)) { notNull = TRUE; }
                MOVE PROPERTY(nameLocation(o));
                MOVE PROPERTY(nameCurrency(o));
            }
            NEW relatedDoc {
                fill = 1;
                type = TABBED;
            }                                            
        }
        NEW details {
            fill = 7;
            type = TABBED;
            NEW lines {
                caption = 'Строки';
                MOVE BOX(l);
            }
            NEW otherInformation {
                caption = 'Прочая информация';
                type = COLUMNS;
                columns = 2;
                NEW invoicing {
                    caption = 'Расчеты';
                    alignment = STRETCH;
                    MOVE PROPERTY(namePaymentTerms(o));                         
                }
                NEW shippingInformation {
                    caption = 'Поставка';
                    alignment = STRETCH;
                    MOVE PROPERTY(scheduledDateTime(o));
                }
                NEW purchaseInformation {
                    caption = 'Прочие';
                    alignment = STRETCH;
                    MOVE PROPERTY(nameRepresentative(o));
                    MOVE PROPERTY(vendorReference(o));
                }
            }            
        }
        NEW footer {
            align = END;
            type = CONTAINERH; 
            NEW total {
                caption = 'Итого';
                type = CONTAINERH;
                MOVE PROPERTY(untaxedAmount(o));
                MOVE PROPERTY(taxAmount(o));
                MOVE PROPERTY(amount(o));                     
            }
        }
    }        
}

@defineDocHistory(order, o, item, quantity);

background = ABSTRACT CASE COLOR (Order);
FORM orders 'Заказы поставщикам'
    OBJECTS o = Order BACKGROUND background(o)
    PROPERTIES(o) READONLYIF isReadonly()
                           nameType, dateTime, number, nameVendor,
                           namePaymentTerms,
                           scheduledDateTime, nameLocation,
                           nameRepresentative, vendorReference,
                           untaxedAmount, taxAmount, amount     
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE 
;

@extendFormEditable(orders);

@defineDocObjectsForm(orders, o, 'Заказы поставщикам');
@defineDocStatusForm(order, o);
@defineDocLinesCount(order, o);
@defineDocLocationAccess(order, o);

NAVIGATOR {
    operations {
        NEW orders FIRST;    
    }
}

clone (Order to, Order from) {
    type(to) <- type(from);
    vendor(to) <- vendor(from);
    paymentTerms(to) <- paymentTerms(from);
    company(to) <- company(from);
    location(to) <- location(from);
    currency(to) <- currency(from);
    representative(to) <- representative(from); 
    FOR order(OrderLine l) = from INLINE NEW nl = OrderLine DO {
        order(nl) <- to;
        item(nl) <- item(l);
        description(nl) <- description(l);
        
        quantity(nl) <- quantity(l);
        
        price(nl) <- price(l);
    }
}

copy 'Копировать' (Order from)  { 
    NEWSESSION {
        NEW to = Order {
            clone(to, from);
            SHOW order OBJECTS o = to DOCKED;
        }
    }
}

EXTEND FORM order PROPERTIES copy(o);

DESIGN order {
    secondaryActions {
        MOVE PROPERTY(copy(o));
    }
}